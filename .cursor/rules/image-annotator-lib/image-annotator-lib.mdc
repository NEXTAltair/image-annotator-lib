---
description: image-annotator-lib 内部実装ルール・設計概要
globs: 
alwaysApply: false
---
version: "3.0.0"

# image-annotator-lib 内部実装ルール・設計概要 (AI 向け指示)

このドキュメントは、`image-annotator-lib` ライブラリの内部実装に関するルール、設計概要、および統合による主要な変更点を記述する。AI はコードを実装・変更する際に [coding-rules.mdc](mdc:.cursor/rules/coding-rules.mdc) を守ったうえでこれらの指示に従うこと。

## 1. 内部実装ルール (AI 向け指示)

### 1.1. クラス責務

AI は `image-annotator-lib` の内部クラスを実装・変更する際、以下の責務分担に従うこと。

- **`BaseAnnotator` (`core/base.py`)**:
  - すべてのアノテーターの共通インターフェース（抽象メソッド）を定義すること。
  - 共通の `predict()` メソッド（チャンク処理、エラーハンドリング含む）を実装すること。
  - 標準化された結果 (`AnnotationResult`) を生成する `_generate_result()` メソッドを提供すること。
- **フレームワーク別基底クラス (`core/base.py` 内、例: `TransformersBaseAnnotator`)**:
  - フレームワーク固有の初期化処理 (`__init__`)、リソース管理 (`__enter__`, `__exit__`) を実装すること。
  - フレームワーク固有の画像前処理 (`_preprocess_images`)、推論実行 (`_run_inference`)、出力フォーマット (`_format_predictions`) の**デフォルト実装**を提供すること。
- **具象モデルクラス (`models/` 配下)**:
  - モデル固有の初期化（設定読み込み、タグ/ラベルロードなど）を行うこと。
  - フレームワーク別基底クラスのメソッドを必要に応じてオーバーライドし、モデル固有の処理（特に `_generate_tags`）を実装すること。
- **`ModelLoad` (`core/model_factory.py`)**:
  - 各フレームワークに対応したモデルのロード、キャッシュ管理（LRU、CPU 退避）、メモリ使用量推定、リソース解放の責務を担うこと。
- **`core/registry.py` モジュール**:
  - モジュールレベルの関数と辞書を用いて、`models/` ディレクトリ内の具象モデルクラスを動的に検出し、設定ファイル に基づいてモデル名とクラスを紐付けて登録する責務を担うこと。

### 1.2. オーバーライドルール

- **禁止:**
  - `BaseAnnotator.predict()`: 共通実装を使用し、**絶対にオーバーライドしないこと**。(.clinerules も参照)
  - `BaseAnnotator._generate_result()`: 標準の結果生成処理を使用し、**オーバーライドしないこと**。
- **必須:**
  - `_preprocess_images()`: フレームワーク別基底クラスまたは具象モデルクラスで**必ず実装すること**。
  - `_run_inference()`: フレームワーク別基底クラスまたは具象モデルクラスで**必ず実装すること**。
  - `_format_predictions()`: フレームワーク別基底クラスまたは具象モデルクラスで**必ず実装すること**。
  - `_generate_tags()`: 具象モデルクラスで**必ず実装すること**。
- **推奨:**
  - `__enter__()`, `__exit__()`: フレームワーク別基底クラスで実装することを推奨する。

### 1.3. 参照

- クラス間のアクセス制御（カプセル化）については を参照すること。

## 2. 設計概要と変更のポイント

### 2.1. 目的

- コードの重複削減、API の統一、メンテナンス性の向上、機能拡張の容易化を図ること。特にモデル管理 (`ModelLoad`) とクラス登録 (`registry.py`) の共通化を重視すること。

### 2.2. 主要な機能

- 画像タギング､キャプショニング､スコアリング機能 (Annotator)
- 設定ファイル [annotator_config.toml](mdc:src/image_annotator_lib/resources/system/annotator_config.toml) 駆動のモデル選択・設定。
- 統一された高機能モデル管理 (動的登録、メモリ管理、エラーハンドリング)。
- 統一された API インターフェース (`Annotator` クラス経由、または直接モデルクラス利用)。

### 2.3. 統合による主な変更点と理由

- **`BaseAnnotator` への統一:**
  - **変更:** Tagger と Scorer の基底クラスを `BaseAnnotator` に統一した。
  - **理由:** 異なる種類のアノテーターを共通のインターフェースで扱えるようにし、ポリモーフィズムを実現するため。共通処理を集約しやすくするため。
- **`predict` メソッドの共通化:**
  - **変更:** 予測処理のメインロジック（チャンク分割、エラーハンドリング）を `BaseAnnotator.predict()` に実装し、サブクラスでのオーバーライドを禁止した。サブクラスはコア処理（前処理、推論、フォーマット、タグ生成）の抽象メソッド実装に集中する。
  - **理由:** 冗長な実装を排除し、エラーハンドリングやバッチ処理のロジックを一元化するため。サブクラスの実装を簡略化するため。
- **`ModelLoad` の導入・強化:**
  - **変更:** モデルのロード、キャッシュ管理（LRU、CPU 退避）、メモリ使用量推定、リソース解放の責務を `ModelLoad` クラス (`core/model_factory.py`) に集約した。フレームワークごとのローダークラスを内部で使用する構造に変更した。
  - **理由:** リソース管理ロジックをアノテータークラスから分離し、責務を明確にするため。より高度で一貫性のあるメモリ管理を実現するため。
- **`registry.py` モジュールの導入:**
  - **変更:** `models/` ディレクトリ内のモデルクラスを動的に検出し、設定ファイルに基づいて登録する機能を `core/registry.py` モジュールとして実装した。
  - **理由:** モデルクラスの追加・変更時にコードの修正を不要にし、拡張性を高めるため。設定ファイル駆動の柔軟なモデル管理を実現するため。
- **`AnnotationResult` への統一:**
  - **変更:** `predict()` の戻り値形式を `list[AnnotationResult]` TypedDict に統一した。
  - **理由:** ライブラリの出力形式を標準化し、利用側での処理を容易にするため。エラー情報なども含められるようにするため。

## 3. 補足情報 (参考)

### 3.1. ディレクトリ構造 (主要部)

```
image-annotator-lib/
         ├── [pyproject.toml](mdc:pyproject.toml)
         ├── [README.md](mdc:README.md)
         └── src/
            └── image_annotator_lib/
               ├── [__init__.py](mdc:src/image_annotator_lib/__init__.py)
               ├── core/          # 共通基盤 ([base.py](mdc:src/image_annotator_lib/core/base.py), [model_factory.py](mdc:src/image_annotator_lib/core/model_factory.py), [registry.py](mdc:src/image_annotator_lib/core/registry.py), [utils.py](mdc:src/image_annotator_lib/core/utils.py))
               ├── exceptions/    # 共通例外 ([errors.py](mdc:src/image_annotator_lib/exceptions/errors.py))
               ├── models/        # 各モデル実装 (tagger_*.py, scorer_*.py)
               └── [api.py](mdc:src/image_annotator_lib/api.py)   # 統合APIクラス
```

### 3.2. 主要クラス/モジュール

- **`Annotator` (`annotator.py`)**: ユーザー向け統合 API。
- **`BaseAnnotator` (`core/base.py`)**: 共通抽象基底クラス。
- **`ModelLoad` (`core/model_factory.py`)**: モデルロード/キャッシュ管理。
- **`core/registry.py`**: モデルクラス登録モジュール。
- **`core/config.py`**: 設定管理クラス `ModelConfigRegistry` (設定ファイル全体の読み込み・保持、設定値へのアクセス提供) と共有インスタンス `config_registry`、関連定数を定義。
- **`core/utils.py`**: ロギング設定 (`setup_logger`) および汎用ユーティリティ (ファイルI/O、ネットワーク、画像処理など)。
- **各種 Tagger/Scorer 実装クラス (`models/`)**: `BaseAnnotator` 継承クラス。
- **共通例外クラス (`exceptions/errors.py`)**: `AnnotatorError` など。

### 3.3. コーディング規約/開発環境 (主要ツール)

(詳細は [coding-rules.mdc](mdc:.cursor/rules/coding-rules.mdc) を参照)


