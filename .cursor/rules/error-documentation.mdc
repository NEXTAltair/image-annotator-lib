---
description: Document major failure points in this project and they were solved.  To be filled by AI.
globs: 
alwaysApply: false
---
---
description: Document major failure points in this project and they were solved.  To be filled by AI.
globs:
---

# Error Documentation

## 1. Mypy エラー: `config.py` と `base.py` 関連 (過去解決済)

### エラー内容

-   `Item "None" of "dict[str, Any] | None" has no attribute "get"Mypyunion-attr` (`config.py` `get` メソッド内)
-   `Argument 3 to "load_transformers_components" of "ModelLoad" has incompatible type "str | float"; expected "str"` (`base.py` で `self.device` 渡す箇所)

### 原因

-   エラー 1: `config.py` `get` メソッド内で、`model_config` 変数が `None` になる可能性があり、`None` に対し `.get()` 呼出。
-   エラー 2: `config.py` `get` メソッド戻り値型ヒント広すぎたため、`base.py` で `self.device` が `str | float` と推論され、`str` 期待関数に渡されていた。

### 解決策

`src/image_annotator_lib/core/config.py` `ModelConfigRegistry.get` メソッド修正:

1.  **KeyError 処理:** `self._config_data[model_name]` 使用、`model_name` 不存在時 `KeyError` 発生させ、`model_config` が `None` になる可能性排除。
2.  **型ヒント精緻化:** 戻り値型ヒントを実際返しうる `str | float | None` に修正。`default` 引数型も `None` に限定。

### 影響

-   上記 Mypy エラー解消。
-   `config.py` `get` メソッド堅牢性向上。

---

## 2. ルールとドキュメント間矛盾点 (過去指摘)

過去、定義ルールとドキュメント内容間に複数矛盾点指摘あり。以下要約。

-   **`Any` 型扱い:** ドキュメント内 `Any` 型理由コメント無使用箇所あり。 -> **推奨対応:** 理由コメント必須、可能限り具体的型へ置換。
-   **ドキュメント更新徹底:** ドキュメント統合･削減後リンク切れ･古情報残存可能性あり。 -> **推奨対応:** 変更後全ファイルリンク･内容再点検。
-   **`predict()` オーバーライド禁止:** ルール禁止だが、ドキュメントサンプルコード等で誤解招く表現無か注意必要だった。
-   **命名規則:** クラス名「*er」禁止ルールに対し、既存有名モデル (`WDTagger` 等) 例外であることドキュメント明記必要あった。
-   **設定ファイルパス:** ドキュメント間設定ファイルパス表記 (`config/` vs `src/.../resources/system/`) 不統一だった。 -> **推奨対応:** パス表記統一。
-   **テストディレクトリ構造:** ルール定義厳密構造が、ドキュメントで十分説明･統一されていなかった。 -> **推奨対応:** 説明統一、ルールへのリンク明記。

**現状:** これら指摘事項多くは、その後開発や今回ドキュメント整理で解消可能性あるが、引続き注意必要。

---

## 3. モデルロード時CUDAエラー及び関連TypeError (過去解決済, 2025-04-19)

### 問題

CUDA非対応環境で `device="cuda"` 指定モデル (例: `aesthetic_shadow_v1`) ロード試行時、`Torch not compiled with CUDA enabled` エラー発生、後続処理で `TypeError` 発生。

### 現象 (ログより)

-   `ERROR: Pipeline 'aesthetic_shadow_v1' ロード中予期せぬエラー発生: Torch not compiled with CUDA enabled`
-   `ERROR: Pipeline 推論中エラー発生: 'NoneType' object is not subscriptable` (モデルロード失敗による)
-   `ERROR: モデル 'aesthetic_shadow_v1' CPUキャッシュ失敗: 'NoneType' object has no attribute 'items'` (モデルロード失敗による)

### 原因

-   インストール済 PyTorch が CUDA 非対応 (CPU版) であったため、`device="cuda"` でのモデルロード失敗。

### 解決策

-   **CUDA利用不可時CPUフォールバック:**
    -   `core/utils.py` に `determine_effective_device` 関数追加。`torch.cuda.is_available()` が `False` かつ設定で `device="cuda"` 要求時、警告ログ出力しつつ内部的にデバイスを `"cpu"` に切替ロジック実装。
    -   `BaseAnnotator.__init__` 等で本関数使用修正。

### 影響

-   CUDA非対応環境でも `device="cuda"` 指定モデルがCPUでロード･実行されるようになった。
-   関連 `TypeError` 解消。
-   フォールバック時警告ログ出力されるようになった。

---

## 4. ログ出力多重化問題 (過去解決済, 2025-04-19)

### 問題

ログ出力多重(同内容2回以上出力)。

### 原因

-   `core/utils.py` logger 初期化処理 (`logger.add` 等) が、モジュール import 経路違い等により複数回実行され、logger sink (出力先) 重複登録。

### 解決策

-   **初期化明示化:**
    -   logger 初期化処理を `init_logger` 関数として分離、多重初期化防止ガード追加。
    -   logger 初期化は `__init__.py` でプロセス起動時1回のみ明示呼出変更。
    -   `core/registry.py` import 時自動初期化(ログ出力、`register_annotators()` 呼出)も廃止、エントリーポイント等で明示実行設計変更。

### 影響

-   ログ出力正常化(1回のみ出力)、可読性･運用性向上。
-   import 時副作用排除、テスト･再利用性･保守性向上。


-   logger/レジストリ初期化はエントリーポイント等で明示呼出必要生じた。

---

## 5. BDD テスト実行時の各種エラー (2025-05-04 進行中)

### 問題

pytest-bdd を用いた BDD テスト実行時に、以下のような複数のエラーが発生。

-   **`StepDefinitionNotFoundError` (多数):**
    -   `tests/features/*.feature` で定義されたステップが、対応する `tests/features/step_definitions/*_steps.py` 内の定義を見つけられない。
    -   共通ステップを `conftest.py` に移動しても、一部のステップ (`utils.feature` 関連以外) が見つからない問題が残存。
-   **`fixture 'datatable' not found`:**
    -   `api_model_discovery_steps.py` のシナリオで発生。Feature ファイル側のステップ定義で `datatable` が渡されていない。
-   **`KeyError` / `AssertionError` (レジストリ関連):**
    -   `registry_steps.py` のテストで発生。`conftest.py::mock_test_config_toml` による設定モックが `register_annotators` に正しく反映されず、レジストリが空のままになる。
-   **`AssertionError` (パス関連):**
    -   `utils_steps.py` (現 `conftest.py`) の `test_リソースアクセスの基本パターン` で発生。`load_file` のテストで HTTP リクエストのモックやパス解決が期待通り動作しない。
-   **`FileNotFoundError` (ログファイル):**
    -   `utils_steps.py` (現 `conftest.py`) の `test_システムログの記録` で発生。ログファイルへの書き込み前にファイルが存在しない。
-   **Integration Test Errors (`available_api_models.toml` 関連):**
    -   `test_tagger_integration.py` で発生。Web API モデルの情報がロードできていない。
-   **`fixture 'test_env' not found`:**
    -   `test_utils_integration.py` で発生。ユニットテスト用のフィクスチャをインテグレーションテストで使用しようとしている。

### 原因 (推定含む)

-   `StepDefinitionNotFoundError`: `pyproject.toml` の pytest-bdd 設定 (`python_files`, `bdd_step_defs_paths` 等) が不十分、または pytest-bdd のステップ探索ロジックと現在のディレクトリ構造･命名規則との間に不整合がある可能性。
-   `fixture 'datatable' not found`: Feature ファイルとステップ定義の引数の不一致。
-   `KeyError` / `AssertionError` (レジストリ): `config_registry` シングルトンの状態をテスト間で分離･モックする方法が不適切。
-   `AssertionError` (パス): `load_file` 関数の内部ロジック、または `requests.get` のモック方法に問題がある可能性。
-   `FileNotFoundError`: `test_env` フィクスチャの実行順序、またはログファイルパスの指定方法に問題がある可能性。
-   Integration Test Errors: テストセットアップ時に `available_api_models.toml` が正しく配置または読み込まれていない。
-   `fixture 'test_env' not found`: テストスコープとフィクスチャスコープの不一致。

### 解決策 (試行中･実施済)

-   `StepDefinitionNotFoundError`:
    -   `pyproject.toml` に `bdd_step_defs_paths` を追加。
    -   共通ステップを `conftest.py` に移動 (一部解消)。
    -   **残課題:** `scorer.feature`, `webapi_annotate.feature` 関連。
-   `fixture 'datatable' not found`: **未対応**。Feature ファイルの確認が必要。
-   `KeyError` / `AssertionError` (レジストリ):
    -   `conftest.py::mock_test_config_toml` を修正し、`config_registry._config` を直接操作するように変更。 **(効果検証中)**
    -   関連するステップ定義の引数ハンドリングを修正。
-   `AssertionError` (パス): **未対応**。`load_file` とモックの再調査が必要。
-   `FileNotFoundError`: **未対応**。`test_env` とログ設定の再調査が必要。
-   Integration Test Errors: **未対応**。テストセットアップの確認が必要。
-   `fixture 'test_env' not found`: **未対応**。インテグレーションテストの構成見直しが必要。
-   その他:
    -   `api_model_discovery_steps.py` の `AttributeError` を修正 (`datatable` のインデックス修正)。
    -   デバッグログを追加。

### 影響

-   BDD テストが多数失敗しており、テストスイート全体の信頼性が低い状態。

## [2025-05-08] WebAPIアノテーターのAPI model ID未設定エラー

- **エラー内容**:
  - "API model ID is not set"
  - テスト用TOMLの内容がconfig_registryに反映されていない、またはアノテーター初期化時に設定取得が不十分なため発生。

- **原因**:
  - アノテーターの__init__でapi_model_idがセットされていない。
  - テスト用TOML生成後にconfig_registry.load()が呼ばれていない。

- **解決策**:
  - __init__で必ずapi_model_id･provider･configをセット。
  - テスト用TOML生成後にconfig_registry.load()を呼ぶ。

## [2025-08-06] Google Gemini API･テスト設計に関する主なエラー･解決策

### エラー1: google.api_core例外のimportエラー
- 内容: google.api_coreの例外をimportしようとして "インポートを解決できません" エラー。
- 原因: google.genai (google-genai) SDKはgoogle.api_coreに依存しない。APIクライアントが返す例外も異なる。
- 解決策: google.api_core例外のimport･catchを削除し、google.genaiが返す例外(ValueError, RuntimeError, json.JSONDecodeError, requests.exceptions.RequestException, Exception)のみに限定。

### エラー2: Gemini API candidates.parts[0].textが空文字/Noneになる
- 内容: Gemini 2.5 Pro/Flash APIでcandidates.parts[0].textが空文字やNoneになる。
- 原因: プロンプト設計不備、モデル制約、API仕様変更、SDKバージョン不整合など。
- 解決策: プロンプト設計･タスク設計を見直し、SDKアップグレードで解消する場合もある。APIレスポンスの型･構造･エラーハンドリングを都度見直す。

### エラー3: テストコードが設計･責務を理解せずに書かれている
- 内容: annotator_clsの初期化時にAPIモデルIDを渡す、with文で使わない等、設計無視のテスト実装。
- 原因: テスト対象の設計･責務を正しく理解していない。
- 解決策: テストコードは設計･責務を正しく理解した上で書く。論理名(model_name_short)を初期化時に渡す。with文で使う設計を守る。

# [2025-05-10] model_factory BDDテスト: ダミー化･型判定･外部依存エラーの解決記録(過去の経緯)

## 状態･背景
- 過去、model_factory のBDDテストで多数の失敗が発生。
- 主な失敗要因:
  1. 本物のモデルロード･ファイル依存による例外や型不一致。
  2. featureファイルの型名と実装上の型名の不一致。
  3. ダミー化の不徹底(部分的に本物のロジックが残存)。
  4. テスト期待値(推定サイズ等)とダミー値の不一致。

## 解決策(当時)
- `tests/conftest.py` で `autouse=True` のfixtureを使い、ModelLoadの全ロード･メモリ計算･OOM判定をダミーで強制上書き。
- 型判定やテスト期待値の柔軟化。

## 現方針
- **BDDテストは統合テストとして実施し、原則としてモック･ダミー･スタブ等は使用しない。**
- モック･ダミー化はユニットテストまたは明示的な例外ケースに限定。
- 過去のダミー化戦略は現方針では採用しない。

# [2025-05-10] base.feature BDDテスト: StepDefinitionNotFoundError の解決記録

## 状態･背景
- base.feature の「cache_and_release_modelメソッドの動作」シナリオでテスト失敗。
- 失敗内容: pytest-bdd の StepDefinitionNotFoundError("Then その後リソースが完全に解放される" のステップ定義が見つからない)。
- 原因: featureファイルのステップ文言と Python 側の @then デコレータ付き関数の文言が完全一致していなかった。

## 解決策
- tests/features/step_definitions/base_steps.py に @then("その後リソースが完全に解放される") のステップ定義を追加。
- 既存のリソース解放検証ロジック(componentsが空であることのアサート)を流用。
- これにより StepDefinitionNotFoundError が解消し、テストがパス。

## 教訓･再発防止
- pytest-bdd では featureファイルのステップ文言と Python 側のデコレータ文言が1文字でも違うとマッチしない。
- ステップ定義の追加･修正時は、featureファイルと完全一致する文言で実装すること。
- 類似文言の既存ステップがある場合も、完全一致する新ステップを追加することを徹底する。

---

# [2025-05-10] 現状のBDDテスト関連ファイルについて

- 現在、**BDDのステップ定義ファイル(tests/features/step_definitions/配下)およびconftest.pyはすべて削除済み**。
- 過去の経緯やエラー記録は参考情報として残すが、現状はBDDテストの実装自体が存在しない。
- エージェントによるコード生成時、**実際のコード･ディレクトリ構成を必ず確認し、ハルシネーション(実在しないファイル･関数･テスト等の生成)を厳禁とすること**。

## BDDテスト: APIキー未設定時のエラーメッセージ検証失敗 (2025-05-13)

- **エラー内容:**
  - BDDテスト `test_apiキーが未設定の場合は認証エラーが発生する` の `@then("'ApiAuthenticationError' のエラーメッセージが返される")` ステップで `AssertionError` が発生。
  - 具体的には、`annotate` 関数が返す結果辞書内のエラーメッセージ (`error` フィールド) に、期待されるエラータイプ名である文字列 `"ApiAuthenticationError"` が含まれていなかった。
  - 実際の `error` メッセージ例: `"Google API エラー: Google API エラー: 環境変数 'GOOGLE_API_KEY' が設定されていないか、空です。 (プロバイダー: Google) - Mocked Error (モデル: Gemini 2.5 Pro Preview)"`

- **原因:**
  - `src/image_annotator_lib/api.py` の `_handle_error` 関数が、捕捉した例外からエラーメッセージを生成する際に、元の例外のクラス名 (型名) をメッセージに含めていなかった。
  - BDDのステップ定義では、このエラーメッセージ文字列内に例外クラス名が含まれていることを期待して検証していたため、アサーションが失敗した。

- **解決策:**
  - `src/image_annotator_lib/api.py` の `_handle_error` 関数を修正。
  - `error_type_name = type(e).__name__` のようにして例外のクラス名を取得し、`error_message = f"{error_type_name}: {str(e)} (モデル: {model_name})"` のように、生成するエラーメッセージの先頭にこのクラス名を含めるように変更した。

- **影響:**
  - 上記修正により、BDDテスト `test_apiキーが未設定の場合は認証エラーが発生する` が期待通りパスするようになった。
  - 他のAPIエラー関連のテストケースでも、エラーメッセージに例外の型名が含まれるようになるため、より具体的なエラー内容の検証が可能になることが期待される。

## [2025-05-13] BDDテスト: Google Gemini API タイムアウト処理とステップ定義

- **エラー内容･課題:**
    - `tests/features/webapi_annotate.feature` のAPIタイムアウトシナリオにおいて、`google.genai.errors.APIError` には直接的なタイムアウトを示す属性や専用の例外クラスが存在しないため、どのようにタイムアウト状態をシミュレートし、検証するかが課題となった。
- **原因:**
    - `google-genai` SDKが、ネットワークタイムアウト等を汎用的な `APIError` としてラップしており、エラーメッセージの内容から判断する必要があるが、テストでの確実なシミュレーションが難しい。
- **解決策:**
    - `tests/features/step_definitions/webapi_annotate_steps.py` の `api_timeout` (Givenステップ) 関数内で、`google_api.GoogleApiAnnotator._run_inference` をモックし、意図的に `RuntimeError("Simulated API timeout for Google API")` を送出するように変更。
    - 対応する `timeout_error_message` (Thenステップ) 関数では、結果に含まれるエラーメッセージに "タイムアウト" または "timeout" が含まれていることをアサートするようにした。
- **影響:**
    - `google.genai.errors.APIError` を直接利用する代わりに `RuntimeError` を使うことで、テストにおけるタイムアウト状況の模倣と検証が明確になった。
    - SDKの仕様に依存しすぎない、より安定したテストが可能になった。

## [2025-05-13] Linterエラー: ロガーの型不整合 (`webapi_annotate_steps.py`)

- **エラー内容:**
    - `tests/features/step_definitions/webapi_annotate_steps.py` 内で、`image_annotator_lib.core.utils.logger` (カスタムロガーの可能性)と `logging.getLogger(__name__)` (標準ロガー)が混在しており、Mypy等のLinterが型不整合としてエラーを報告していた。
    - 具体的には、`monkeypatch.setattr` でモックする対象のロガーと、ステップ定義内で使用するロガーの型が一致しない可能性があった。
- **原因:**
    - プロジェクト内で複数のロガーインスタンスまたはロガー取得方法が使用されていた。
- **解決策:**
    - `webapi_annotate_steps.py` 内のロガー取得を `logger = logging.getLogger(__name__)` に統一。
    - `image_annotator_lib.core.utils.logger` のインポートを削除(またはコメントアウト)。
- **影響:**
    - Linterエラーが解消され、コードの静的解析における信頼性が向上した。
    - ロガーの使用方法が統一され、可読性と保守性が向上した。

## [2025-05-13] BDDテスト: APIエラーメッセージのアサーション失敗

- **エラー内容:**
    - `tests/features/webapi_annotate.feature` のAPIエラーレスポンスを検証するシナリオ (`Scenario: APIからエラーレスポンスが返された場合は適切に処理する`) のThenステップで `AssertionError` が発生。
    - エラーメッセージは `Simulated API Processing Error` となっており、アサーション `assert "エラー" in model_result["error"] or "error" in model_result["error"]` が失敗していた。
- **原因:**
    - アサーションが日本語の「エラー」または小文字の「error」を期待していたが、実際のエラーメッセージは先頭が大文字の「Error」だったため、Pythonの `in` 演算子(ケースセンシティブ)ではマッチしなかった。
- **解決策:**
    - `tests/features/step_definitions/webapi_annotate_steps.py` の `api_error_message_in_result` (Thenステップ) 関数を修正。
    - アサーションを `assert "error" in model_result["error"].lower() or "エラー" in model_result["error"]` のように変更し、エラーメッセージを小文字に変換してから "error" が含まれるかを確認するようにした。日本語「エラー」のチェックはそのまま残した。
- **影響:**
    - 大文字･小文字の違いによるアサーション失敗が解消され、テストの安定性が向上した。
    - より堅牢なエラーメッセージ検証が可能になった。