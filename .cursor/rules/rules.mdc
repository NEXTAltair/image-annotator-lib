---
description: 
globs: 
alwaysApply: true
---
---
description: 常に従うべき指示。
globs:
alwaysApply: true
---
# 基本原則 (**必ず**適用)

- **参照:** 応答するときには `docs` ディレクトのドキュメント `.cursor/rules` ディレクトリの `mdc` **必ず** を参照する。
- **YAGNI原則:** 「後で使うかもしれない」機能は実装せず、現時点で必要な最小限の機能のみを実装する。
- **半角文字:** コード、コメント、ドキュメント内では、**絶対に全角英数字･全角記号を使用しないこと**。記号や数字は半角を使用する。
- **変更の記録:** 既存の設計を変更した場合は関連ドキュメントを確認し、その内容と理由を適切な場所に記載する。

# 常に遵守すべき事項 (追加ルール)

1. 1応答で質問に十分回答不可の場合、複数応答へ分割。
2. 改善提案･更なる発展について:
- S1: コード安定性･スケーラビリティ向上方法提案。
- S2: パフォーマンス･セキュリティ強化戦略提示。
- S3: 可読性･保守性改善方法推奨。
- 更に調査すべき領域提案。
3. コード、コメント、ドキュメント内記述ルール:
- **リスト内包表記:** 可読性維持のため、リスト内包表記内 `if` と `for` 使用は各1回まで制限。
- **型ヒント:**
  - 全関数･メソッド引数･戻り値には、可能限り具体的型ヒント付与。
  - **モダンな型:** `typing.List` や `typing.Dict` 不使用、Python 3.9以降組込型(`list`, `dict`)または`collections.abc`型使用。`Optional`も不使用、代わり`str | None`等記法使用。
  - **複雑な型:** 複雑辞書構造には`TypedDict`活用。
  - **オーバライド:** 親クラスメソッドオーバーライド時、`@override`デコレーター使用明示。

# カプセル化ルール (AI向け指示)

AI はクラスを設計･変更する際、以下のカプセル化原則を**厳守**すること。

## 最重要禁止事項

- **他クラス内部変数への直接アクセス禁止:** 他クラスの内部変数 (`_` 始まり) には**絶対にアクセスしないこと**。これはカプセル化を破壊し、保守性を著しく低下させる。

## クラス設計原則

- **Tell, Don't Ask:** クラス利用者は内部状態を知る必要がないように設計すること。状態を問い合わせて外部で判断するのではなく、必要な操作や判断はクラス自身の**振る舞い (メソッド)** として提供すること。
- **内部状態の非公開:**
    - 内部状態は原則として外部に公開しない。
    - 状態の公開が必要な場合(読み取り専用)は `@property` を使用し、**ミュータブルな内部オブジェクト (`list`, `dict` 等) の参照を直接返さないこと** (防御的コピーも原則禁止)。必要最小限の情報をイミュータブルな形式で返すことを検討すること。
    - 状態変更は、その操作がクラスの責務として意味を持つ公開メソッド経由でのみ行うこと。
- **ゲッター/セッター原則禁止:** 単純な値取得 (`get_*`) や設定 (`set_*`) のためだけのメソッドは**作成しないこと**。
- **公開インターフェース最小化:** 外部に公開するメソッドやプロパティは、クラスの責務遂行に**必要最小限**とすること (YAGNI原則)。
- **命名:** 内部変数は `_` プレフィックスを付与し、公開メンバーは役割が明確な名前とすること。

## リファクタリング方針

既存コードの違反は以下の優先度で修正すること。

1.  **最高:** 他クラス内部変数への直接アクセス。
2.  **高:** 他クラス内部メソッド (`_`始まり) への直接アクセス。
3.  **中:** 安易なゲッター/セッター、ミュータブルな内部参照の返却。

## チェックリスト (AI向け)

- [ ] ドキュメントを参照して返答しているか?
- [ ] 他クラス内部変数 (`_`始まり) への直接アクセスはないか?
- [ ] 内部状態を不必要に公開していないか? (安易なゲッター/セッター、ミュータブル参照返却はないか?)
- [ ] 公開インターフェースは最小限か?
- [ ] 命名規則は守られているか?
