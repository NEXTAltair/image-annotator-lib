---
description: 
globs: *.py
alwaysApply: false
---
version: "5.0.0"
# コーディングルール (AI向け指示)

AI はコードを生成・編集する際、以下のルールに**厳守**する。

## 基本原則

- **可読性:** 常に読みやすく、理解しやすいコードを記述する。
- **YAGNI原則:** 「後で使うかもしれない」機能は実装せず、現時点で必要な最小限の機能のみを実装する。
- **半角文字:** コード、コメント、ドキュメント内では、**絶対に全角英数字や全角記号を使用しないこと**。記号は原則として半角を使用する。
- **参照:** コーディング時は `docs` ディレクトリのドキュメントを参照する。
- **変更の記録** 既存の設計を変更した場合は `docs` `memory-bank` 内の記述を確認しその内容と理由を記載する｡

## 開発環境

- **OS:** Windows 11 を開発環境として想定する。
- **Python:** Python 3.12 を使用する。
- **依存関係管理:** 開発環境の依存関係管理には `uv` を使用する。

## コーディングスタイル

- **PEP 8:** PEP 8 ガイドラインに従うこと。
- **命名規則:**
    - 変数名、関数名、メソッド名は、その役割や意味が明確にわかる具体的な名前 (`snake_case`) を使用する。
    - クラス名は、その役割や特性を具体的に表す名詞または名詞句 (`CamelCase`) とする。**安易に動詞に `er` を付けただけの名前（例: `Loader`, `Runner`）は避け、より具体的な名前（例: `ModelLoad`, `InferenceRun`）を選ぶこと。**
- **パス処理:** パス操作には `os` モジュールではなく `pathlib` モジュールを使用する。
- **リスト内包表記:** 可読性を維持するため、リスト内包表記内での `if` と `for` の使用はそれぞれ1つまでに制限する。

## 型ヒントと静的解析

- **型ヒント:**
    - すべての関数、メソッドの引数と戻り値には、可能な限り具体的な型ヒントを付与する。
    - **モダンな型:** `typing.List` や `typing.Dict` ではなく、Python 3.9 以降の組み込み型 (`list`, `dict`) や `collections.abc` の型を使用する。Optional型も使用せず `str | None`と表記する｡
    - **複雑な型:** 複雑な辞書構造には `TypedDict` を活用する。
    - **オーバライド:** 親メソッドをオーバーライドしたメソッドは `@override`デコレーターを使用しオーバーライドしてあると明示する｡
    - **メソッドチェーン:** メソッドチェーンを考慮する場合は `Self` 型を使用する。
    - **`Any` の回避:** `Any` 型の使用は最小限に留め、具体的な型を指定するよう努めること。やむを得ず使用する場合は理由をコメントに残すこと。
- **静的解析:**
    - **エラー抑制禁止:** Mypy や Ruff (lint) が報告するエラーや警告は、`# type: ignore` や `# noqa` コメントで抑制せず、コードや型定義を修正して根本的に解決する。
    - **回避策禁止:** **`try...except ImportError` などで Mypy エラーを回避するような、その場しのぎの対応も禁止する。**

## エラーハンドリング

- **特定のエラー処理:** 予期される特定のエラー（例: `FileNotFoundError`, `ValueError`, `KeyError`, `OutOfMemoryError`）のみを具体的に `try...except` で捕捉し、適切に処理する。
- **過剰なハンドリング回避:** 予期しない一般的な `Exception` を広範囲にキャッチして処理を継続するような、過剰なエラーハンドリングは避けること。不明なエラーはログに記録し、適切に上位に伝播させるか、処理を中断する。
- **無意味なハンドリング回避:** 前段の処理で既にエラーが発生している可能性がある場合、後続の処理で無意味なエラーハンドリング（例: 失敗した可能性のある変数をさらに `try...except` で囲む）を行わないこと。エラー発生時の制御フローを明確に設計する。
- **`OutOfMemoryError`:** メモリ不足エラーは適切にキャッチし、発生箇所（モデル名、デバイスなど）がわかる情報を含めて再送出する。
- **エラーメッセージ:** エラー発生時は、原因特定に役立つ明確なエラーメッセージを含めること。

## 設計原則

- **単一責任の原則 (SRP):** 各クラス、関数、モジュールは、単一の明確な責任を持つように設計する。
- **責任分離:** 状態管理や特定の複雑な処理は、専用のクラスや関数に委譲するを検討する。
- **カプセル化:** クラスの内部実装への依存を避け、公開インターフェースを通じてのみ対話する。（詳細は [encapsulation-rules.mdc](mdc:.cursor/rules/encapsulation-rules.mdc) を参照）

## 原則違反の通知

- **ユーザーへの通知:** AI がこれらの定義された原則に違反するコードを生成・編集せざるを得ない場合は、**一度作業を停止し、必ずユーザーにその旨と理由を説明し、指示を仰ぐこと。**

## 問題解決プロセス

- **エラー/警告対応:** エラーや警告が発生した場合、AI は以下の手順で対応する。
    1.  **解決策の検討:** 問題の原因を分析し、少なくとも3つ以上の異なる解決策を検討する。
    2.  **最適な解決策の選択:** 検討した解決策の中から、最も適切と考えられるものを選択し、その理由を記録する。
    3.  **試行と反復:** 選択した解決策を適用し、問題が解決したか確認する。解決しない場合は、別の解決策を試すか、さらに別の解決策を検討する。
    4.  **エスカレーション:** 上記の試行を3回以上繰り返しても問題が解決しない場合は、作業を中断し、ユーザーに現在の状況、試した解決策、および考えられる原因を説明し、判断を求めること。

## 自己チェック義務

AI はコードを生成・編集した後、ユーザーに提示する前に**必ず**以下の点について自己チェックを行い、ルール違反があれば修正すること。

- [ ] **半角文字:** コード、コメント、ドキュメント内に全角英数字・全角記号が含まれていないか？ (特に括弧、スペース)
- [ ] **モダンな型ヒント:** `typing.List`, `typing.Dict`, `typing.Optional` など古い型を使用していないか？ (`list`, `dict`, `| None` を使用しているか？)
