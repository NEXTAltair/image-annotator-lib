---
description: プロジェクトのディレクトリ構造に関するルール / Rules for the project directory structure
globs: 
alwaysApply: false
---
version: "4.0.0"

# ディレクトリ構成ルール (AI向け指示)

このドキュメントは、`image-annotator-lib` ライブラリと `tests` ディレクトリの内部構成に関するルールを定義する。AI はファイルやディレクトリを作成・移動する際に、以下の指示に従うこと。

## 1. 基本ルール

- ディレクトリ名、ファイル名には、その役割を簡潔に示す英語の小文字とアンダースコア (`_`) を使用する。


## 2. `image-annotator-lib` ディレクトリ構成

このディレクトリは、画像のアノテーション(評価、タグ付けなど)に関するコア機能を提供する独立したライブラリである。

- **`src/image_annotator_lib/`**: ライブラリのソースコードを格納する。
    - **`core/`**: モデル読み込み、ベースクラス、共通ユーティリティなど、ライブラリの中核となるコンポーネントを配置する。
    - **`exceptions/`**: ライブラリ固有の例外クラスを定義する。
    - **`annotators/`**: (仮称) 各アノテーター(例: スコアラー、タガー)の具体的な実装クラスを、モデルの種類や機能に応じてサブディレクトリに整理して配置する。(例: `annotators/scorers/`, `annotators/taggers/`)
    - **`__init__.py`**: 主要なクラスや関数を公開するためのエントリーポイント。
    - その他、必要な機能に応じたサブディレクトリ(例: `utils/` など)を適宜作成する。
- **`config/`**: ライブラリ固有の設定ファイル(モデル設定など)を配置する。
- **`docs/`**: ライブラリのドキュメント(APIリファレンス、使用方法など)を配置する。
- **`pyproject.toml`**: ライブラリの依存関係、ビルド設定などを定義する。
- **`README.md`**: ライブラリの概要、インストール方法、基本的な使い方を記述する。


## 3. ルート `tests` ディレクトリ構成

- **`unit/`**: ユニットテストを配置する。
    - **`image_annotator_lib/`**: `image-annotator-lib` の各モジュールに対応するユニットテストを、元の `src/` 内の構造を模倣して配置する。(例: `tests/unit/image_annotator_lib/core/test_base.py`)
    - その他、メインアプリケーションの各モジュールに対応するユニットテストも同様に配置する。
- **`integration/`**: 複数のコンポーネントや外部サービスとの連携をテストする統合テストを配置する。`image-annotator-lib` とメインアプリケーションの連携テストなどもここに含める。
- **`features/`**: BDD (振る舞い駆動開発) の Feature ファイル (`.feature`) を配置する。`image-annotator-lib` の振る舞いをテストする Feature ファイルもここに含める。
- **`step_defs/`**: BDD のステップ定義ファイル (`test_*.py`) を配置する。`image-annotator-lib` のステップ定義もここに含める。
- **`resources/`**: テストで使用する画像ファイル、設定ファイルなどのリソースを配置する。
- **`conftest.py`**: プロジェクト全体のテストで共通して使用するフィクスチャやフックを定義する。

**指示:**
- 新しい `image-annotator-lib` のモジュールを追加した場合、対応するユニットテストファイルを `tests/unit/image_annotator_lib/` 配下の適切な場所に作成する。
- 新しいBDDシナリオを追加する場合、Feature ファイルを `tests/features/` に、ステップ定義を `tests/step_defs/` に作成する。
