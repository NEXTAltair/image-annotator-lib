---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: "*.py"
alwaysApply: false
---
---
description: "カプセル化と適切なプロパティアクセスに関するルール"
globs: image-annotator-lib/**/*.py
version: "1.1.0"
---

# カプセル化ルール (AI向け指示)

AI はクラスを設計・変更する際、以下のカプセル化原則を**厳守**すること。

## 最重要禁止事項

- **他クラス内部変数への直接アクセス禁止:** 他クラスの内部変数 (`_` 始まり) には**絶対にアクセスしないこと**。これはカプセル化を破壊し、保守性を著しく低下させる。

## クラス設計原則

- **Tell, Don't Ask:** クラス利用者は内部状態を知る必要がないように設計すること。状態を問い合わせて外部で判断するのではなく、必要な操作や判断はクラス自身の**振る舞い (メソッド)** として提供すること。
- **内部状態の非公開:**
    - 内部状態は原則として外部に公開しない。
    - 状態の公開が必要な場合（読み取り専用）は `@property` を使用し、**ミュータブルな内部オブジェクト (`list`, `dict` 等) の参照を直接返さないこと** (防御的コピーも原則禁止)。必要最小限の情報をイミュータブルな形式で返すことを検討すること。
    - 状態変更は、その操作がクラスの責務として意味を持つ公開メソッド経由でのみ行うこと。
- **ゲッター/セッター原則禁止:** 単純な値取得 (`get_*`) や設定 (`set_*`) のためだけのメソッドは**作成しないこと**。
- **公開インターフェース最小化:** 外部に公開するメソッドやプロパティは、クラスの責務遂行に**必要最小限**とすること (YAGNI原則)。
- **命名:** 内部変数は `_` プレフィックスを付与し、公開メンバーは役割が明確な名前とすること。

## リファクタリング方針

既存コードの違反は以下の優先度で修正すること。

1.  **最高:** 他クラス内部変数への直接アクセス。
2.  **高:** 他クラス内部メソッド (`_`始まり) への直接アクセス。
3.  **中:** 安易なゲッター/セッター、ミュータブルな内部参照の返却。

## チェックリスト (AI向け)

- [ ] 他クラス内部変数 (`_`始まり) への直接アクセスはないか？
- [ ] 内部状態を不必要に公開していないか？ (安易なゲッター/セッター、ミュータブル参照返却はないか？)
- [ ] 公開インターフェースは最小限か？
- [ ] 命名規則は守られているか？
