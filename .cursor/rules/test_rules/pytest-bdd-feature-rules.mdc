---
description: 
globs: tests/**/*.feature
alwaysApply: false
---
---
description: BDD の原則に基づくテスト実装および実行ルール / Guidelines for BDD-based test implementation and execution
globs: tests/**/*.feature
version: 2.7.0
---

# BDD Feature ファイル ルールガイドライン

## 1. Feature ファイルの基本構造

- **配置**: Feature ファイルは `tests/features` ディレクトリに配置する。
- **Feature 説明**: ファイルの冒頭で、Feature 全体の目的や背景を簡潔に説明する。ユーザー視点の価値を明確にする。
- **Background**:
  - 複数のシナリオで共通となる前提条件（主に Given ステップだが、状況に応じて When/Then も含む共通手順）を記述する。
  - これにより、各シナリオでの記述の重複を避け、コードを圧縮する。
- **Scenario**:
  - Feature 内の具体的な振る舞いを検証する個別のテストケース。
  - 一つのシナリオでは、一つの振る舞いに焦点を当てる。
- **Given / When / Then**:
  - **Given**: テスト実行前のシステムの初期状態や前提条件を設定する。
  - **When**: ユーザーの操作や、システムに対する特定のアクションを記述する。
  - **Then**: When のアクションによって期待される結果やシステムの応答を検証する。
  - Given-When-Then 形式で機能を明確に記述する。

## 2. シナリオ記述のベストプラクティス

- **明確な自然言語**:
  - 開発者だけでなく、ビジネス担当者など非エンジニアにも理解できる平易な言葉を選ぶ。
  - 専門用語や実装の詳細（具体的な関数名、メソッド名、ファイル名、Pathなど）に寄りすぎないように注意する。
  - ビジネス要件に焦点を当てる。
- **独立性の確保**:
  - 各シナリオは他のシナリオの実行結果に依存せず、単独で実行可能であるべき。
  - 必要なデータや状態は、そのシナリオ内（または Background）で完結するように設定する。
- **単一責任**: 一つのシナリオでは、検証したい振る舞いを一つに絞り込む。
- **ステップの再利用**:
  - 共通の前提条件 (`Given`)、操作 (`When`)、検証 (`Then`) は、パラメータ化された**ステップ定義**として実装し、再利用を促進する（コード圧縮）。Background だけでなく、個別のシナリオ内でもこれらの共通ステップ定義を呼び出すことが重要。

## 3. Scenario Outline と Examples

- **目的**: 同じ振る舞いを異なるデータパターンでテストしたい場合に使用する。
- **パラメータ**: `Examples` テーブル内のパラメータ名と値は、**半角英数字** および **スネークケース** で必ず記述する。これはテストの安定性向上、文字化けリスク回避、CI 環境等での互換性確保のため。
- **類似ケース**: 類似のケースを複数テストする場合はシナリオアウトラインを使用する。
