---
description: BDD ステップ関数 ガイドライン (AI向け指示)
globs: 
alwaysApply: false
---
version: 4.0.0


# BDD ステップ定義 ガイドライン (AI向け指示)

このガイドラインは、BDD (振る舞い駆動開発) のステップ関数を実装する際の原則と考慮事項を示す。AI は以下の指示に従い、ステップ関数の生成・編集を行う。

## 1. ステップ定義の基本原則

### 1.1 再利用性と明確性

- **配置**: テストの種類（単体/統合）に応じて、定められたディレクトリ (`tests/step_defs` または `tests/integration`) にステップ定義を配置する。
- **紐付け**: Feature ファイルとステップ定義は、`scenarios` 関数などを用いて適切に関連付けること。テスト関数内での `@scenario` デコレータの使用はしない。
- **パラメータ化**: 同一ロジックを異なるシナリオで再利用できるよう、ステップ定義は積極的にパラメータ化すること。適切なパーサー機能 (`parsers.parse` など) を活用して、Feature ファイルからの値を受け取れるように設計すること。
- **命名規則**:
    - ステップ定義関数には、その役割 (Given/When/Then) を示すプレフィックス (`given_`, `when_`, `then_`) を付与し、目的を明確にすること。
    - Feature ファイルのステップ記述と、対応するステップ定義関数の命名には一貫性を持たせること。
- **関数の序列**: 役割 (Given/When/Then) のごとにまとめる｡
- **値の受け渡し**: あるステップで生成した値を後続のステップで利用する場合は、`target_fixture` のようなフィクスチャ渡し機能を利用して、明確に値を引き渡すこと。
- **datatabele**: feature ファイルで定義されたテーブルはpytest-bddがデフォルトで提供する `datatabele` フィクスチャで参照する｡

### 1.2 依存関係とセットアップ

- **フィクスチャの活用**: テスト実行前のセットアップ（DB接続、テストデータ準備など）、共通データの提供、テスト後のクリーンアップ処理は、pytest の標準的なフィクスチャ機能 (`@pytest.fixture`) を用いて実装すること。
- **依存性の明示**: ステップ定義が必要とするデータや事前状態は、フィクスチャを引数として受け取ることで、依存関係をコード上で明確に示すこと。
- **自動実行**: 全テストで共通して必要なセットアップやクリーンアップ（一時ファイルの管理など）は、自動実行されるフィクスチャ (`autouse=True` を指定) の利用を検討すること。
- **BDD専用ヘルパー**: BDD シナリオに特有のセットアップやヘルパー関数が必要な場合は、専用のフィクスチャとして整理し、再利用性を高めること。

## 2. ステップ定義の構成と責務

### 2.1 モジュール性と整理

- **共通化**: プロジェクト全体や特定の機能群で共通して利用できる**フィクスチャやヘルパー関数**は、`conftest.py` に定義するか、専用のヘルパーモジュールに集約し、インポートして利用すること。共通の**ステップ定義**自体は、関連性の高いステップ定義ファイルに含めるか、必要に応じて専用のステップ定義モジュールを作成すること。
- **責務分離**: ステップ定義ファイルは、関連する機能やドメインごとに分割し、各ファイルが持つ責務を明確に保つこと。

### 2.2 適切な粒度

- **単一アクション/検証**: 一つのステップ定義は、原則として一つの具体的なアクション（When）または検証（Then）に対応するように、適切な粒度で設計すること。複雑な処理は複数のステップに分割するか、ヘルパー関数に切り出すことを検討すること。

## 3. 実装上の考慮事項

- **状態管理**: ステップ間で状態を共有する必要がある場合は、フィクスチャ (`target_fixture` や共有コンテキストオブジェクト) を介して行うこと。グローバル変数の使用は避けること。
- **アサーションの配置**:
    - `Then` ステップには、期待される結果を検証するための明確なアサーションを含めること。
    - `When` ステップはアクションの実行に集中し、原則としてアサーションを含めないこと。
- **可読性**: 関数名、変数名、コメントを適切に用い、ステップ定義コード自体の可読性を高く保つこと。処理の意図が明確に伝わるように記述すること。
- **ドキュメンテーション連携**: ステップ定義は、対応する Feature ファイル（エンドユーザー視点のドキュメント）と連携して理解されるものであることを意識すること。
